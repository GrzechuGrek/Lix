 _____________________________________________________________________________
/                                                                             \
|   Lix                            Cross-compiling Lix for Windows on Linux   |
\_____________________________________________________________________________/



This document describes how to build Windows binaries on a Linux system,
using the MinGW cross-compiler.

Here's the roadmap:

    * install the MinGW compiler
    * build from source the libraries wanted by Lix, using MinGW
    * install the libraries to MinGW's directory
    * build Lix with its makefile target "make cross"



INSTALLING THE COMPILER
-----------------------

On Debian, run aptitude, install mingw-w64, this will install the 32-bit
version, too. I will only describe how to build a 32-bit version.

On a different operating system, use your package manager to install MinGW,
or build it from source. I don't have experience with either.

You can test your new compiler: Write a C++ hello world, compile it like this:

    i586-mingw32msvc-g++ hello.cpp

We can use wine to run the executable, or you can try it on a Windows machine.
It should work with no problems. If you wish, run

    strip hello.exe

to remove debugging symbols, this uses the normal strip(1) from Linux.

Before building or installing Windows libraries to the cross-compiling system,
you should find out exactly where the cross-compiler has its directory.
For my installation on Debian 6, it was:

    /usr/i586-mingw32msvc

Maybe your compiler sits in /usr/local/i586-mingw32msvc instead. No matter
where it is, remember that directory. If it differs from mine, when you are
about to configure and build the various libraries, you will have to edit the
paths supplied to configure scripts. You will also have to edit the Lix
makefile.



ENET
----

Before we continue, make sure that you know your MinGW installation directory.
If you don't, read the last paragraphs of "Installing the compiler" above.

Download enet 1.3.x from enet.bespin.org.

A web search has led me to:

    https://wiki.wxwidgets.org/Cross-Compiling_Under_Linux

with the following directions to build WxWidgets. I will use them one-to-one
with adaptions to my own MinGW path. If your MinGW dir is different, edit the
following command line, otherwise run it like this:

    ./configure --prefix=/usr/i586-mingw32msvc --host=i586-mingw32msvc --build=i686-linux

I must admit that I have merely run it like this:

    ./configure --prefix=/usr/i586-mingw32msvc --host=i586-mingw32msvc

This produces a warning, but I got it running anyway. I don't know what the
--build switch does.

After configuring, run:

    make
    sudo make install | tee simon-make-install.txt

I have a habit of logging the output of make install to a .txt file.
I'm extremely paranoid of installation clutter and want to be able to remove
everything by hand if necessary. If you aren't this paranoid, you don't have
to pipe through tee.

Anyway, make install will copy everything to /usr/i586-mingw32msvc/lib and
/usr/i586-mingw32msvc/include, or wherever your directory sits.

If you wish, look into these dirs to verify that the files are there.



ZLIB
----

zlib is a compression library required for libpng. Most Lix graphics come as
PNG, so we need both libraries.

From

    https://wiki.openttd.org/Cross-compiling_for_Windows#Compiling_zlib

come these directions, which I have edited. I've commented the edits with #'s:

    wget http://zlib.net/zlib-1.2.8.tar.gz
    tar xvfz zlib-1.2.8.tar.gz
    cd zlib-1.2.8
    # mkdir BuildMingW and building in this subdir won't work
    sed -e s/"PREFIX ="/"PREFIX = i586-mingw32msvc-"/ -i win32/Makefile.gcc
    make -f win32/Makefile.gcc
    # the following is all in one command line.
    # all /usr/local/i5... have been replaced with /usr/i5...
    sudo BINARY_PATH=/usr/i586-mingw32msvc/bin INCLUDE_PATH=/usr/i586-mingw32msvc/include LIBRARY_PATH=/usr/i586-mingw32msvc/lib make -f win32/Makefile.gcc install | tee simon-make-install.txt



LIBPNG
------

Instructions come from the same page as the zlib installation info.

    # I have downloaded version 1.6.16 instead, and manually
    wget http://sourceforge.net/projects/libpng/files/libpng15/older-releases/1.5.16/libpng-1.5.16.tar.xz/download libpng-1.5.16.tar.xz
    tar xvfJ libpng-1.5.16.tar.xz
    # I have continued from here
    cd libpng-1.5.16
    mv INSTALL INSTALL.txt
    chmod +x configure
    # again, I have removed the local/ in /usr/local/
    ./configure --host=i586-mingw32msvc --prefix=/usr/i586-mingw32msvc CPPFLAGS=-I/usr/i586-mingw32msvc/include LDFLAGS=-L/usr/i586-mingw32msvc/lib
    make
    sudo make install | tee simon-make-install.txt



ALLEGRO
-------

Download the Allegro 4.4 source. By "A4", we mean Allegro 4.

Get the minimal DirectX 8 SDK for MinGW (dx80_mgw.zip). Download it from
'http://alleg.sourceforge.net/wip.html' and unzip it in the cross-compiler
base directory.

To recall, my MinGW base directory was:

    /usr/i586-mingw32msvc

You might read (Allegro 4)/docs/build/mingw32.txt, especially this
paragraph: 3. Use the cmake/Toolchain-mingw.cmake file. Remember to set
MINGDIR if your MinGW binaries live alongside your native binaries,
otherwise the 'make install' step may make a mess in your normal directories.

Therefore I've done:

    export MINGDIR=/usr/i586-mingw32msvc

In the downloaded A4 source, do:

    mkdir BuildMinGW

The name of that dir is arbitrary. If you screw up, you can rm -rf that
directory and start again. cd into that directory now.

Then, from within (Allegro 4)/BuildMinGW, we do:

    cmake -DCMAKE_TOOLCHAIN_FILE=cmake/Toolchain-mingw.cmake ..
    make
    sudo make install | tee simon-make-install.txt

This will install A4 to ${MINGDIR}/lib, ${MINGDIR}/include, etc., as desired.



BUILDING LIX
------------

The Lix makefile has a target "cross" to make the binaries. Make sure you
have all the libraries installed first.

Run from the Lix root directory:

    make cross

Even if your MinGW directory is different from mine, MinGW should know its
own library directory and find all libraries in it. If you get undefined
references nonetheless, edit the following line in the Lix makefile to match
your MinGW directory:

    CRO_MINGDIR  = /usr/i586-mingw32msvc

The makefile builds the Windows game executable "./bin/binwin/lix.exe" and the
server application "./bin/binwin/lixserv.exe". To test them, run them in Wine.

The default makefile target "all" doesn't imply "cross". You have to
specify "cross" separately. If you wish to build both the Linux and Windows
binaries, you can run "make all cross".
